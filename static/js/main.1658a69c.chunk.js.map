{"version":3,"sources":["SimpleTabs.js","App.js","utils.js","serviceWorker.js","index.js"],"names":["SimpleTabs","children","React","useState","value","setValue","TabPanel","props","index","other","role","hidden","id","aria-labelledby","Box","py","Tabs","onChange","event","newValue","aria-label","map","child","i","Tab","label","disabled","App","inputData","setInputData","outputData","setOutputData","useEffect","HelpTabContent","Typography","Container","component","type","accept","fileInput","files","target","fileReader","FileReader","console","log","onload","result","workbook","XLSX","read","cellDates","raw","data","sheet","Sheets","hasOwnProperty","sheetData","utils","sheet_to_json","defval","formattedSheetData","Object","keys","headerCellValue","readOnly","forEach","row","push","values","cellValue","concat","loadedFileData","e","alert","readAsBinaryString","readExcelFile","onloadend","style","display","htmlFor","Button","variant","color","mt","valueRenderer","cell","toString","onCellsChanged","changes","grid","col","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1658a69c.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    'aria-controls': `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nexport default function SimpleTabs({ children }) {\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const TabPanel = (props) => {\r\n    const { children, value, index, ...other } = props;\r\n  \r\n    return (\r\n      <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`simple-tabpanel-${index}`}\r\n        aria-labelledby={`simple-tab-${index}`}\r\n        {...other}\r\n      >\r\n        {value === index && (\r\n          <Box py={3}>\r\n            {children}\r\n          </Box>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\r\n          {children.map((child, i) => {\r\n            return child && <Tab label={child.props.label} disabled={child.props.disabled} {...a11yProps(i)} />\r\n          })}\r\n        </Tabs>\r\n      </div>\r\n      {children.map((child, i) => (\r\n        <TabPanel value={value} index={i}>\r\n          {child}\r\n        </TabPanel>\r\n      ))}\r\n    </div>\r\n  );\r\n}","import React, { useState, useEffect } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport \"./App.css\";\nimport ReactDataSheet from \"react-datasheet\";\nimport \"react-datasheet/lib/react-datasheet.css\";\nimport { readExcelFile } from \"./utils\";\nimport { Container, Box, Typography } from \"@material-ui/core\";\nimport SimpleTabs from \"./SimpleTabs\";\n\nfunction App() {\n\n  const [inputData, setInputData] = useState()\n  const [outputData, setOutputData] = useState()\n\n  useEffect(() => {\n    if(inputData) {\n      // todo\n      setOutputData([])\n    }\n  }, [inputData])\n\n  // https://www.programmersought.com/article/4000147640/\n  const onExcelImport = fileInput => {\n    // Get the uploaded file object\n    const { files } = fileInput.target;\n    // Read the file through the FileReader object\n    const fileReader = new FileReader();\n    readExcelFile(fileReader, files);\n    fileReader.onloadend = () => {\n      setInputData(fileReader.loadedFileData)\n    }\n  }\n\n  const HelpTabContent = (props) => (\n    <Box {...props}>\n      <Typography>This is the help tab content.</Typography>\n    </Box>\n  )\n\n  return (\n    <Container component={Box} py={8}>\n      <Box>\n        <input id=\"file-upload\" type=\"file\" accept=\".xlsx, .xls\" onChange={onExcelImport} style={{ display: \"none\" }}/>\n        <label htmlFor=\"file-upload\">\n          <Button variant=\"contained\" color=\"primary\" component=\"span\">\n            Upload File\n          </Button>\n        </label>\n        <Box mt={2}>\n        { inputData ?\n          <SimpleTabs>\n              <Box label=\"Input Data\">\n                <Typography>\n                  This is the data that was imported from the file upload. Feel free to change any values. All changes will update the output data in real time.\n                </Typography>\n                <ReactDataSheet\n                  data={inputData}\n                  valueRenderer={cell => cell.value.toString() }\n                  onCellsChanged={changes => {\n                    const grid = inputData.map(row => [...row]);\n                    changes.forEach(({ cell, row, col, value }) => {\n                      grid[row][col] = { ...grid[row][col], value };\n                    });\n                    setInputData(grid)\n                  }}\n                />\n              </Box>\n            { outputData &&\n              <Box label=\"Output Data\">\n                <Typography>This is the output tab.</Typography>\n              </Box>\n            }\n            <HelpTabContent label=\"Help\" />\n          </SimpleTabs>\n        : <HelpTabContent />}\n        </Box>\n      </Box>\n    </Container>\n  );\n}\n\nexport default App;\n","import XLSX from \"xlsx\";\r\n\r\n// https://www.programmersought.com/article/4000147640/\r\nexport const readExcelFile = (fileReader, files) => {\r\n  console.log('Reading Excel file...')\r\n  fileReader.onload = event => {\r\n    try {\r\n      const { result } = event.target;\r\n      // Read the entire excel table object in binary stream\r\n      // https://github.com/SheetJS/sheetjs/issues/703\r\n      const workbook = XLSX.read(result, { type: \"binary\", cellDates: true, raw: false });\r\n      let data = []; // store the acquired data\r\n      // Traverse each worksheet for reading (here only the first table is read by default)\r\n      for (const sheet in workbook.Sheets) {\r\n        if (workbook.Sheets.hasOwnProperty(sheet)) {\r\n          // Convert excel to json data using the sheet_to_json method\r\n          // https://github.com/SheetJS/sheetjs/issues/159\r\n          let sheetData = XLSX.utils.sheet_to_json(workbook.Sheets[sheet], { defval: \"\" })\r\n          // Store the header row information first to follow https://github.com/nadbm/react-datasheet standards\r\n          let formattedSheetData = [Object.keys(sheetData[0]).map(headerCellValue => { return { value: headerCellValue, readOnly: true }; })]\r\n          // Load all rows' values with the same format\r\n          sheetData.forEach(row => { \r\n            formattedSheetData.push(Object.values(row).map(cellValue => { return { value: cellValue }; })) \r\n          })\r\n          data = data.concat(formattedSheetData);\r\n          break; // If you only take the first table, uncomment this line\r\n        }\r\n      }\r\n      fileReader.loadedFileData = data;\r\n    } catch (e) {\r\n      // Here you can throw a related prompt with a file type error incorrect.\r\n      alert(\"File could not be parsed. It may have been the wrong file type.\");\r\n      return;\r\n    }\r\n  };\r\n  // Open the file in binary mode\r\n  fileReader.readAsBinaryString(files[0]);\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
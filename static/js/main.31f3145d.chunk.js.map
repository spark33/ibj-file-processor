{"version":3,"sources":["WadizContext.js","utils.js","SimpleTabs.js","WadizInputPage.js","App.js","serviceWorker.js","index.js"],"names":["WadizContext","React","createContext","WadizContextProvider","children","useState","activeTab","setActiveTab","Provider","value","getColumnIndex","headerRow","i","findIndex","cell","alert","err","console","log","SimpleTabs","TabPanel","props","index","other","role","hidden","id","aria-labelledby","Box","py","Tabs","onChange","event","newTab","aria-label","map","child","Tab","label","disabled","WadizInputPage","useContext","inputData","setInputData","outputData","setOutputData","useEffect","inputHeaderRow","calculatedData","funderNameIndex","outputHeaderRow","clone","splice","readOnly","slice","forEach","row","calculatedRow","quantity","deliveryOption","productName","Array","Math","floor","fill","_","newRow","push","transformData","HelpTabContent","mb","Typography","my","variant","Chip","Divider","Container","fixed","component","mt","type","accept","fileInput","files","target","fileReader","FileReader","onload","result","workbook","XLSX","read","cellDates","raw","data","sheet","Sheets","hasOwnProperty","sheetData","utils","sheet_to_json","defval","formattedSheetData","Object","keys","headerCellValue","values","cellValue","concat","loadedFileData","e","readAsBinaryString","readExcelFile","onloadend","style","display","htmlFor","Button","color","valueRenderer","toString","onCellsChanged","changes","grid","col","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.31f3145d.chunk.js","sourcesContent":["import React, { useContext } from 'react';\r\n\r\nexport const WadizContext = React.createContext({})\r\nexport const useWadizContext = () => useContext(WadizContext)\r\n\r\nexport const WadizContextProvider = ({ children }) => {\r\n    const [activeTab, setActiveTab] = React.useState(0);\r\n    return (\r\n        <WadizContext.Provider\r\n            value={{\r\n                activeTab,\r\n                setActiveTab\r\n            }}\r\n        >\r\n            {children}\r\n        </WadizContext.Provider>\r\n    )\r\n}","import XLSX from \"xlsx\";\r\n\r\n// https://www.programmersought.com/article/4000147640/\r\nexport const readExcelFile = (fileReader, files) => {\r\n  console.log('Reading Excel file...')\r\n  fileReader.onload = event => {\r\n    try {\r\n      const { result } = event.target;\r\n      // Read the entire excel table object in binary stream\r\n      // https://github.com/SheetJS/sheetjs/issues/703\r\n      const workbook = XLSX.read(result, { type: \"binary\", cellDates: true, raw: false });\r\n      let data = []; // store the acquired data\r\n      // Traverse each worksheet for reading (here only the first table is read by default)\r\n      for (const sheet in workbook.Sheets) {\r\n        if (workbook.Sheets.hasOwnProperty(sheet)) {\r\n          // Convert excel to json data using the sheet_to_json method\r\n          // https://github.com/SheetJS/sheetjs/issues/159\r\n          let sheetData = XLSX.utils.sheet_to_json(workbook.Sheets[sheet], { defval: \"\" })\r\n          // Store the header row information first to follow https://github.com/nadbm/react-datasheet standards\r\n          let formattedSheetData = [Object.keys(sheetData[0]).map(headerCellValue => { return { value: headerCellValue, readOnly: true }; })]\r\n          // Load all rows' values with the same format\r\n          sheetData.forEach(row => { \r\n            formattedSheetData.push(Object.values(row).map(cellValue => { return { value: cellValue }; })) \r\n          })\r\n          data = data.concat(formattedSheetData);\r\n          // break; // If you only take the first table, uncomment this line\r\n        }\r\n      }\r\n      fileReader.loadedFileData = data;\r\n      console.log(\"Completed XLSX file read.\")\r\n    } catch (e) {\r\n      // Here you can throw a related prompt with a file type error incorrect.\r\n      alert(\"File could not be parsed. It may have been the wrong file type.\");\r\n      return;\r\n    }\r\n  };\r\n  // Open the file in binary mode\r\n  fileReader.readAsBinaryString(files[0]);\r\n}\r\n\r\nexport const getColumnIndex = (headerRow, value) => {\r\n  try {\r\n    const i = headerRow.findIndex(cell => cell.value === value)\r\n    if (i > 0) {\r\n      return i\r\n    } else {\r\n      alert(`Header ${value} was not found.`)\r\n    }\r\n  } catch (err) {\r\n    console.log('Unknown error finding column index')\r\n  }\r\n    // Ideal; leaving below for future when I can figure out customizing Babel presets with CRA\r\n    // return i > 0 ? i : throw new ReferenceError(`Header ${value} was not found.`)\r\n}","import React from 'react';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    'aria-controls': `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nexport default function SimpleTabs({ activeTab, setActiveTab, children }) {\r\n\r\n  const handleChange = (event, newTab) => {\r\n    setActiveTab(newTab)\r\n  }\r\n\r\n  const TabPanel = (props) => {\r\n    const { children, value, index, ...other } = props;\r\n  \r\n    return (\r\n      <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`simple-tabpanel-${index}`}\r\n        aria-labelledby={`simple-tab-${index}`}\r\n        {...other}\r\n      >\r\n        {value === index && (\r\n          <Box py={3}>\r\n            {children}\r\n          </Box>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Tabs value={activeTab} onChange={handleChange} aria-label=\"simple tabs example\">\r\n          {children.map((child, i) => {\r\n            return child && <Tab label={child.props.label} disabled={child.props.disabled} {...a11yProps(i)} />\r\n          })}\r\n        </Tabs>\r\n      </div>\r\n      {children.map((child, i) => (\r\n        child && (\r\n          <TabPanel value={activeTab} index={i}>\r\n            {child}\r\n          </TabPanel>\r\n        )\r\n      ))}\r\n    </div>\r\n  );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport \"./App.css\";\r\nimport ReactDataSheet from \"react-datasheet\";\r\nimport \"react-datasheet/lib/react-datasheet.css\";\r\nimport { readExcelFile, getColumnIndex } from \"./utils\";\r\nimport { Container, Box, Typography, Chip, Divider } from \"@material-ui/core\";\r\nimport SimpleTabs from \"./SimpleTabs\";\r\nimport { useWadizContext } from \"./WadizContext\";\r\nimport { clone } from 'lodash';\r\n\r\nconst WadizInputPage = () => {\r\n\r\n  const { activeTab, setActiveTab } = useWadizContext()\r\n  const [inputData, setInputData] = useState()\r\n  const [outputData, setOutputData] = useState()\r\n\r\n  useEffect(() => {\r\n    const transformData = () => {\r\n      const inputHeaderRow = inputData[0]\r\n      let calculatedData = [];\r\n      const PACKAGE_SIZE = 2;\r\n  \r\n      // Helper Variables\r\n      let funderNameIndex = getColumnIndex(inputHeaderRow, '서포터 성명')\r\n  \r\n      // Transform Header Row\r\n      const outputHeaderRow = clone(inputHeaderRow)\r\n      outputHeaderRow.splice(funderNameIndex + 1, 0, { value: '서포터 성명 2', readOnly: true })\r\n  \r\n      inputData.slice(1).forEach((row, i) => {\r\n        // Row helper variables\r\n        let calculatedRow = clone(row);\r\n        let quantity = calculatedRow[getColumnIndex(inputHeaderRow, '수량')].value\r\n        let deliveryOption = calculatedRow[getColumnIndex(inputHeaderRow, '옵션조건')].value\r\n        let productName = calculatedRow[getColumnIndex(inputHeaderRow, '리워드')].value\r\n  \r\n        // 서포터 성명 칼럼 카피\r\n        calculatedRow.splice(funderNameIndex + 1, 0, clone(row[funderNameIndex]))\r\n  \r\n        /*\r\n          옵션조건이 단일배송지이고 수량이 1 보다 클 경우\r\n        */\r\n        if(deliveryOption === '단일배송지' && quantity > 1) {\r\n          Array(Math.floor(quantity / PACKAGE_SIZE)).fill().forEach((_,i) => {\r\n            let newRow = clone(calculatedRow)\r\n            newRow[getColumnIndex(outputHeaderRow, '리워드')].value = '[패밀리팩] ' + productName\r\n            calculatedData.push(newRow)\r\n          })\r\n          calculatedRow[getColumnIndex(outputHeaderRow, '수량')].value = 1\r\n          calculatedData.push(calculatedRow)\r\n        /*\r\n          옵션조건이 여러배송지이고 수량이 1 보다 클 경우\r\n        */\r\n        } else if (deliveryOption === '여러배송지' && quantity > 1) {\r\n          Array(quantity).fill().forEach((_,i) => {\r\n            let newRow = clone(calculatedRow)\r\n            if(i > 0) {\r\n              newRow[getColumnIndex(outputHeaderRow, '배송지 주소')].value = \"\"\r\n            }\r\n            newRow[getColumnIndex(outputHeaderRow, '수량')].value = 1\r\n            calculatedData.push(newRow)\r\n          })\r\n        } else {\r\n          calculatedData.push(calculatedRow)\r\n        }\r\n      })\r\n  \r\n      setOutputData([outputHeaderRow, ...calculatedData])\r\n    }\r\n\r\n    if(inputData) {\r\n      transformData()\r\n    }\r\n  }, [inputData])\r\n\r\n  // https://www.programmersought.com/article/4000147640/\r\n  const onExcelImport = fileInput => {\r\n    // Get the uploaded file object\r\n    const { files } = fileInput.target;\r\n    // Read the file through the FileReader object\r\n    const fileReader = new FileReader();\r\n    readExcelFile(fileReader, files);\r\n    fileReader.onloadend = () => {\r\n      setInputData(fileReader.loadedFileData)\r\n      setActiveTab(2)\r\n    }\r\n  }\r\n\r\n  const HelpTabContent = (props) => (\r\n    <Box {...props}>\r\n      <Box mb={4}>\r\n        <Typography>\r\n          와디즈의 결제정보를 업로드하면 정리된 작업용 시트를 뽑을수 있다. 현재 시스템이 처리하는 프로세스는 다음과 같다:  \r\n        </Typography>\r\n      </Box>\r\n      <Box my={4}>\r\n        <Typography variant=\"h5\">1. '여러배송지' 줄 나누기</Typography>\r\n        <Box my={2}>\r\n          <Chip label=\"수량 > 1\" />\r\n          <Chip label=\"옵션조건 = '여러배송지'\" />\r\n        </Box>\r\n        <Typography>\r\n          수량이 1보다 크고 '옵션조건'이 '여러배송지'로 세팅이 되어 있을 경우, 수량만큼 같은 줄이 반복되어 삽입된다.\r\n        </Typography>\r\n      </Box>\r\n      <Divider />\r\n      <Box my={4}>\r\n        <Typography variant=\"h5\">2. '패밀리팩' 변환</Typography>\r\n        <Box my={2}>\r\n          <Chip label=\"수량 > 1\" />\r\n          <Chip label=\"옵션조건 = '단일배송지'\" />\r\n        </Box>\r\n        <Typography>\r\n          수량이 1보다 크고 '옵션조건'이 '단일배송지'로 세팅이 되어 있을 경우, 상품명 앞 '[패밀리팩]'을 추가한다.\r\n        </Typography>\r\n      </Box>\r\n      <Divider />\r\n      <Box my={4}>\r\n        <Typography variant=\"h5\">3. '서포터 성명 2' 칼럼 추가</Typography>\r\n        <Box my={2}>\r\n          <Chip label=\"모든 열에 추가\" />\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  )\r\n\r\n  return (\r\n    <Container fixed component={Box} py={8}>\r\n      <Typography variant=\"h5\">와디즈 작업용 시트</Typography>\r\n      <Box mt={2}>\r\n        <SimpleTabs activeTab={activeTab} setActiveTab={setActiveTab}>\r\n          <HelpTabContent label=\"Help\" />\r\n          <Box label=\"Upload\">\r\n            <input id=\"file-upload\" type=\"file\" accept=\".xlsx, .xls\" onChange={onExcelImport} style={{ display: \"none\" }}/>\r\n            <label htmlFor=\"file-upload\">\r\n              <Button variant=\"contained\" color=\"primary\" component=\"span\">\r\n                결제배송정보 업로드\r\n              </Button>\r\n            </label>\r\n          </Box>\r\n          { inputData &&\r\n            <Box label=\"Input Data Preview\">\r\n              <Typography>\r\n                This is the data that was imported from the file upload. Feel free to change any values. All changes will update the output data in real time.\r\n              </Typography>\r\n              <ReactDataSheet\r\n                data={inputData}\r\n                valueRenderer={cell => cell.value ? cell.value.toString() : '' }\r\n                onCellsChanged={changes => {\r\n                  const grid = inputData.map(row => [...row]);\r\n                  changes.forEach(({ cell, row, col, value }) => {\r\n                    grid[row][col] = { ...grid[row][col], value };\r\n                  });\r\n                  setInputData(grid)\r\n                }}\r\n              />\r\n            </Box>\r\n          }\r\n          { outputData &&\r\n            <Box label=\"Output Data\">\r\n              <Typography>This is the output tab.</Typography>\r\n              <ReactDataSheet\r\n                data={outputData}\r\n                valueRenderer={cell => cell.value ? cell.value.toString() : '' }\r\n                onCellsChanged={changes => {\r\n                  const grid = inputData.map(row => [...row]);\r\n                  changes.forEach(({ cell, row, col, value }) => {\r\n                    grid[row][col] = { ...grid[row][col], value };\r\n                  });\r\n                  setInputData(grid)\r\n                }}\r\n              />\r\n            </Box>\r\n          }\r\n          { inputData && \r\n            <Box label=\"Configurations\">\r\n              Configurations tab\r\n            </Box>\r\n          }\r\n        </SimpleTabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default WadizInputPage;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { WadizContextProvider } from \"./WadizContext\";\nimport WadizInputPage from \"./WadizInputPage\";\n\nfunction App() {\n\n  return (\n    <WadizContextProvider>\n      <WadizInputPage />\n    </WadizContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}